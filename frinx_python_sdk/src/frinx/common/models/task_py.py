import pprint
import re  # noqa: F401

import six


class Task(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        "taskType": "str",
        "status": "str",
        "inputData": "dict(str, object)",
        "referenceTaskName": "str",
        "retryCount": "int",
        "seq": "int",
        "correlationId": "str",
        "pollCount": "int",
        "taskDefName": "str",
        "scheduledTime": "int",
        "startTime": "int",
        "endTime": "int",
        "updateTime": "int",
        "startDelayInSeconds": "int",
        "retriedTaskId": "str",
        "retried": "bool",
        "executed": "bool",
        "callbackFromWorker": "bool",
        "responseTimeoutSeconds": "int",
        "workflowInstanceId": "str",
        "workflowType": "str",
        "taskId": "str",
        "reasonForIncompletion": "str",
        "callbackAfterSeconds": "int",
        "workerId": "str",
        "outputData": "dict(str, object)",
        "workflowTask": "WorkflowTask",
        "domain": "str",
        "rateLimitPerFrequency": "int",
        "rateLimitFrequencyInSeconds": "int",
        "externalInputPayloadStoragePath": "str",
        "externalOutputPayloadStoragePath": "str",
        "workflowPriority": "int",
        "executionNameSpace": "str",
        "isolationGroupId": "str",
        "iteration": "int",
        "subWorkflowId": "str",
        "subworkflowChanged": "bool",
        "loopOverTask": "bool",
        "taskDefinition": "TaskDef",
        "queueWaitTime": "int",
    }

    attribute_map = {
        "taskType": "taskType",
        "status": "status",
        "inputData": "inputData",
        "referenceTaskName": "referenceTaskName",
        "retryCount": "retryCount",
        "seq": "seq",
        "correlationId": "correlationId",
        "pollCount": "pollCount",
        "taskDefName": "taskDefName",
        "scheduledTime": "scheduledTime",
        "startTime": "startTime",
        "endTime": "endTime",
        "updateTime": "updateTime",
        "startDelayInSeconds": "startDelayInSeconds",
        "retriedTaskId": "retriedTaskId",
        "retried": "retried",
        "executed": "executed",
        "callbackFromWorker": "callbackFromWorker",
        "responseTimeoutSeconds": "responseTimeoutSeconds",
        "workflowInstanceId": "workflowInstanceId",
        "workflowType": "workflowType",
        "taskId": "taskId",
        "reasonForIncompletion": "reasonForIncompletion",
        "callbackAfterSeconds": "callbackAfterSeconds",
        "workerId": "workerId",
        "outputData": "outputData",
        "workflowTask": "workflowTask",
        "domain": "domain",
        "rateLimitPerFrequency": "rateLimitPerFrequency",
        "rateLimitFrequencyInSeconds": "rateLimitFrequencyInSeconds",
        "externalInputPayloadStoragePath": "externalInputPayloadStoragePath",
        "externalOutputPayloadStoragePath": "externalOutputPayloadStoragePath",
        "workflowPriority": "workflowPriority",
        "executionNameSpace": "executionNameSpace",
        "isolationGroupId": "isolationGroupId",
        "iteration": "iteration",
        "subWorkflowId": "subWorkflowId",
        "subworkflowChanged": "subworkflowChanged",
        "loopOverTask": "loopOverTask",
        "taskDefinition": "taskDefinition",
        "queueWaitTime": "queueWaitTime",
    }

    def __init__(
        self,
        taskType=None,
        status=None,
        inputData=None,
        referenceTaskName=None,
        retryCount=None,
        seq=None,
        correlationId=None,
        pollCount=None,
        taskDefName=None,
        scheduledTime=None,
        startTime=None,
        endTime=None,
        updateTime=None,
        startDelayInSeconds=None,
        retriedTaskId=None,
        retried=None,
        executed=None,
        callbackFromWorker=None,
        responseTimeoutSeconds=None,
        workflowInstanceId=None,
        workflowType=None,
        taskId=None,
        reasonForIncompletion=None,
        callbackAfterSeconds=None,
        workerId=None,
        outputData=None,
        workflowTask=None,
        domain=None,
        rateLimitPerFrequency=None,
        rateLimitFrequencyInSeconds=None,
        externalInputPayloadStoragePath=None,
        externalOutputPayloadStoragePath=None,
        workflowPriority=None,
        executionNameSpace=None,
        isolationGroupId=None,
        iteration=None,
        subWorkflowId=None,
        subworkflowChanged=None,
        loopOverTask=None,
        taskDefinition=None,
        queueWaitTime=None,
    ):  # noqa: E501
        """Task - a model defined in Swagger"""  # noqa: E501
        self._taskType = None
        self._status = None
        self._inputData = None
        self._referenceTaskName = None
        self._retryCount = None
        self._seq = None
        self._correlationId = None
        self._pollCount = None
        self._taskDefName = None
        self._scheduledTime = None
        self._startTime = None
        self._endTime = None
        self._updateTime = None
        self._startDelayInSeconds = None
        self._retriedTaskId = None
        self._retried = None
        self._executed = None
        self._callbackFromWorker = None
        self._responseTimeoutSeconds = None
        self._workflowInstanceId = None
        self._workflowType = None
        self._taskId = None
        self._reasonForIncompletion = None
        self._callbackAfterSeconds = None
        self._workerId = None
        self._outputData = None
        self._workflowTask = None
        self._domain = None
        self._rateLimitPerFrequency = None
        self._rateLimitFrequencyInSeconds = None
        self._externalInputPayloadStoragePath = None
        self._externalOutputPayloadStoragePath = None
        self._workflowPriority = None
        self._executionNameSpace = None
        self._isolationGroupId = None
        self._iteration = None
        self._subWorkflowId = None
        self._subworkflowChanged = None
        self._loopOverTask = None
        self._taskDefinition = None
        self._queueWaitTime = None
        self.discriminator = None
        if taskType is not None:
            self.taskType = taskType
        if status is not None:
            self.status = status
        if inputData is not None:
            self.inputData = inputData
        if referenceTaskName is not None:
            self.referenceTaskName = referenceTaskName
        if retryCount is not None:
            self.retryCount = retryCount
        if seq is not None:
            self.seq = seq
        if correlationId is not None:
            self.correlationId = correlationId
        if pollCount is not None:
            self.pollCount = pollCount
        if taskDefName is not None:
            self.taskDefName = taskDefName
        if scheduledTime is not None:
            self.scheduledTime = scheduledTime
        if startTime is not None:
            self.startTime = startTime
        if endTime is not None:
            self.endTime = endTime
        if updateTime is not None:
            self.updateTime = updateTime
        if startDelayInSeconds is not None:
            self.startDelayInSeconds = startDelayInSeconds
        if retriedTaskId is not None:
            self.retriedTaskId = retriedTaskId
        if retried is not None:
            self.retried = retried
        if executed is not None:
            self.executed = executed
        if callbackFromWorker is not None:
            self.callbackFromWorker = callbackFromWorker
        if responseTimeoutSeconds is not None:
            self.responseTimeoutSeconds = responseTimeoutSeconds
        if workflowInstanceId is not None:
            self.workflowInstanceId = workflowInstanceId
        if workflowType is not None:
            self.workflowType = workflowType
        if taskId is not None:
            self.taskId = taskId
        if reasonForIncompletion is not None:
            self.reasonForIncompletion = reasonForIncompletion
        if callbackAfterSeconds is not None:
            self.callbackAfterSeconds = callbackAfterSeconds
        if workerId is not None:
            self.workerId = workerId
        if outputData is not None:
            self.outputData = outputData
        if workflowTask is not None:
            self.workflowTask = workflowTask
        if domain is not None:
            self.domain = domain
        if rateLimitPerFrequency is not None:
            self.rateLimitPerFrequency = rateLimitPerFrequency
        if rateLimitFrequencyInSeconds is not None:
            self.rateLimitFrequencyInSeconds = rateLimitFrequencyInSeconds
        if externalInputPayloadStoragePath is not None:
            self.externalInputPayloadStoragePath = externalInputPayloadStoragePath
        if externalOutputPayloadStoragePath is not None:
            self.externalOutputPayloadStoragePath = externalOutputPayloadStoragePath
        if workflowPriority is not None:
            self.workflowPriority = workflowPriority
        if executionNameSpace is not None:
            self.executionNameSpace = executionNameSpace
        if isolationGroupId is not None:
            self.isolationGroupId = isolationGroupId
        if iteration is not None:
            self.iteration = iteration
        if subWorkflowId is not None:
            self.subWorkflowId = subWorkflowId
        if subworkflowChanged is not None:
            self.subworkflowChanged = subworkflowChanged
        if loopOverTask is not None:
            self.loopOverTask = loopOverTask
        if taskDefinition is not None:
            self.taskDefinition = taskDefinition
        if queueWaitTime is not None:
            self.queueWaitTime = queueWaitTime

    @property
    def taskType(self):
        """Gets the taskType of this Task.  # noqa: E501


        :return: The taskType of this Task.  # noqa: E501
        :rtype: str
        """
        return self._taskType

    @taskType.setter
    def taskType(self, taskType):
        """Sets the taskType of this Task.


        :param taskType: The taskType of this Task.  # noqa: E501
        :type: str
        """

        self._taskType = taskType

    @property
    def status(self):
        """Gets the status of this Task.  # noqa: E501


        :return: The status of this Task.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Task.


        :param status: The status of this Task.  # noqa: E501
        :type: str
        """
        allowed_values = [
            "IN_PROGRESS",
            "CANCELED",
            "FAILED",
            "FAILED_WITH_TERMINAL_ERROR",
            "COMPLETED",
            "COMPLETED_WITH_ERRORS",
            "SCHEDULED",
            "TIMED_OUT",
            "SKIPPED",
        ]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}".format(  # noqa: E501
                    status, allowed_values
                )
            )

        self._status = status

    @property
    def inputData(self):
        """Gets the inputData of this Task.  # noqa: E501


        :return: The inputData of this Task.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._inputData

    @inputData.setter
    def inputData(self, inputData):
        """Sets the inputData of this Task.


        :param inputData: The inputData of this Task.  # noqa: E501
        :type: dict(str, object)
        """

        self._inputData = inputData

    @property
    def referenceTaskName(self):
        """Gets the referenceTaskName of this Task.  # noqa: E501


        :return: The referenceTaskName of this Task.  # noqa: E501
        :rtype: str
        """
        return self._referenceTaskName

    @referenceTaskName.setter
    def referenceTaskName(self, referenceTaskName):
        """Sets the referenceTaskName of this Task.


        :param referenceTaskName: The referenceTaskName of this Task.  # noqa: E501
        :type: str
        """

        self._referenceTaskName = referenceTaskName

    @property
    def retryCount(self):
        """Gets the retryCount of this Task.  # noqa: E501


        :return: The retryCount of this Task.  # noqa: E501
        :rtype: int
        """
        return self._retryCount

    @retryCount.setter
    def retryCount(self, retryCount):
        """Sets the retryCount of this Task.


        :param retryCount: The retryCount of this Task.  # noqa: E501
        :type: int
        """

        self._retryCount = retryCount

    @property
    def seq(self):
        """Gets the seq of this Task.  # noqa: E501


        :return: The seq of this Task.  # noqa: E501
        :rtype: int
        """
        return self._seq

    @seq.setter
    def seq(self, seq):
        """Sets the seq of this Task.


        :param seq: The seq of this Task.  # noqa: E501
        :type: int
        """

        self._seq = seq

    @property
    def correlationId(self):
        """Gets the correlationId of this Task.  # noqa: E501


        :return: The correlationId of this Task.  # noqa: E501
        :rtype: str
        """
        return self._correlationId

    @correlationId.setter
    def correlationId(self, correlationId):
        """Sets the correlationId of this Task.


        :param correlationId: The correlationId of this Task.  # noqa: E501
        :type: str
        """

        self._correlationId = correlationId

    @property
    def pollCount(self):
        """Gets the pollCount of this Task.  # noqa: E501


        :return: The pollCount of this Task.  # noqa: E501
        :rtype: int
        """
        return self._pollCount

    @pollCount.setter
    def pollCount(self, pollCount):
        """Sets the pollCount of this Task.


        :param pollCount: The pollCount of this Task.  # noqa: E501
        :type: int
        """

        self._pollCount = pollCount

    @property
    def taskDefName(self):
        """Gets the taskDefName of this Task.  # noqa: E501


        :return: The taskDefName of this Task.  # noqa: E501
        :rtype: str
        """
        return self._taskDefName

    @taskDefName.setter
    def taskDefName(self, taskDefName):
        """Sets the taskDefName of this Task.


        :param taskDefName: The taskDefName of this Task.  # noqa: E501
        :type: str
        """

        self._taskDefName = taskDefName

    @property
    def scheduledTime(self):
        """Gets the scheduledTime of this Task.  # noqa: E501


        :return: The scheduledTime of this Task.  # noqa: E501
        :rtype: int
        """
        return self._scheduledTime

    @scheduledTime.setter
    def scheduledTime(self, scheduledTime):
        """Sets the scheduledTime of this Task.


        :param scheduledTime: The scheduledTime of this Task.  # noqa: E501
        :type: int
        """

        self._scheduledTime = scheduledTime

    @property
    def startTime(self):
        """Gets the startTime of this Task.  # noqa: E501


        :return: The startTime of this Task.  # noqa: E501
        :rtype: int
        """
        return self._startTime

    @startTime.setter
    def startTime(self, startTime):
        """Sets the startTime of this Task.


        :param startTime: The startTime of this Task.  # noqa: E501
        :type: int
        """

        self._startTime = startTime

    @property
    def endTime(self):
        """Gets the endTime of this Task.  # noqa: E501


        :return: The endTime of this Task.  # noqa: E501
        :rtype: int
        """
        return self._endTime

    @endTime.setter
    def endTime(self, endTime):
        """Sets the endTime of this Task.


        :param endTime: The endTime of this Task.  # noqa: E501
        :type: int
        """

        self._endTime = endTime

    @property
    def updateTime(self):
        """Gets the updateTime of this Task.  # noqa: E501


        :return: The updateTime of this Task.  # noqa: E501
        :rtype: int
        """
        return self._updateTime

    @updateTime.setter
    def updateTime(self, updateTime):
        """Sets the updateTime of this Task.


        :param updateTime: The updateTime of this Task.  # noqa: E501
        :type: int
        """

        self._updateTime = updateTime

    @property
    def startDelayInSeconds(self):
        """Gets the startDelayInSeconds of this Task.  # noqa: E501


        :return: The startDelayInSeconds of this Task.  # noqa: E501
        :rtype: int
        """
        return self._startDelayInSeconds

    @startDelayInSeconds.setter
    def startDelayInSeconds(self, startDelayInSeconds):
        """Sets the startDelayInSeconds of this Task.


        :param startDelayInSeconds: The startDelayInSeconds of this Task.  # noqa: E501
        :type: int
        """

        self._startDelayInSeconds = startDelayInSeconds

    @property
    def retriedTaskId(self):
        """Gets the retriedTaskId of this Task.  # noqa: E501


        :return: The retriedTaskId of this Task.  # noqa: E501
        :rtype: str
        """
        return self._retriedTaskId

    @retriedTaskId.setter
    def retriedTaskId(self, retriedTaskId):
        """Sets the retriedTaskId of this Task.


        :param retriedTaskId: The retriedTaskId of this Task.  # noqa: E501
        :type: str
        """

        self._retriedTaskId = retriedTaskId

    @property
    def retried(self):
        """Gets the retried of this Task.  # noqa: E501


        :return: The retried of this Task.  # noqa: E501
        :rtype: bool
        """
        return self._retried

    @retried.setter
    def retried(self, retried):
        """Sets the retried of this Task.


        :param retried: The retried of this Task.  # noqa: E501
        :type: bool
        """

        self._retried = retried

    @property
    def executed(self):
        """Gets the executed of this Task.  # noqa: E501


        :return: The executed of this Task.  # noqa: E501
        :rtype: bool
        """
        return self._executed

    @executed.setter
    def executed(self, executed):
        """Sets the executed of this Task.


        :param executed: The executed of this Task.  # noqa: E501
        :type: bool
        """

        self._executed = executed

    @property
    def callbackFromWorker(self):
        """Gets the callbackFromWorker of this Task.  # noqa: E501


        :return: The callbackFromWorker of this Task.  # noqa: E501
        :rtype: bool
        """
        return self._callbackFromWorker

    @callbackFromWorker.setter
    def callbackFromWorker(self, callbackFromWorker):
        """Sets the callbackFromWorker of this Task.


        :param callbackFromWorker: The callbackFromWorker of this Task.  # noqa: E501
        :type: bool
        """

        self._callbackFromWorker = callbackFromWorker

    @property
    def responseTimeoutSeconds(self):
        """Gets the responseTimeoutSeconds of this Task.  # noqa: E501


        :return: The responseTimeoutSeconds of this Task.  # noqa: E501
        :rtype: int
        """
        return self._responseTimeoutSeconds

    @responseTimeoutSeconds.setter
    def responseTimeoutSeconds(self, responseTimeoutSeconds):
        """Sets the responseTimeoutSeconds of this Task.


        :param responseTimeoutSeconds: The responseTimeoutSeconds of this Task.  # noqa: E501
        :type: int
        """

        self._responseTimeoutSeconds = responseTimeoutSeconds

    @property
    def workflowInstanceId(self):
        """Gets the workflowInstanceId of this Task.  # noqa: E501


        :return: The workflowInstanceId of this Task.  # noqa: E501
        :rtype: str
        """
        return self._workflowInstanceId

    @workflowInstanceId.setter
    def workflowInstanceId(self, workflowInstanceId):
        """Sets the workflowInstanceId of this Task.


        :param workflowInstanceId: The workflowInstanceId of this Task.  # noqa: E501
        :type: str
        """

        self._workflowInstanceId = workflowInstanceId

    @property
    def workflowType(self):
        """Gets the workflowType of this Task.  # noqa: E501


        :return: The workflowType of this Task.  # noqa: E501
        :rtype: str
        """
        return self._workflowType

    @workflowType.setter
    def workflowType(self, workflowType):
        """Sets the workflowType of this Task.


        :param workflowType: The workflowType of this Task.  # noqa: E501
        :type: str
        """

        self._workflowType = workflowType

    @property
    def taskId(self):
        """Gets the taskId of this Task.  # noqa: E501


        :return: The taskId of this Task.  # noqa: E501
        :rtype: str
        """
        return self._taskId

    @taskId.setter
    def taskId(self, taskId):
        """Sets the taskId of this Task.


        :param taskId: The taskId of this Task.  # noqa: E501
        :type: str
        """

        self._taskId = taskId

    @property
    def reasonForIncompletion(self):
        """Gets the reasonForIncompletion of this Task.  # noqa: E501


        :return: The reasonForIncompletion of this Task.  # noqa: E501
        :rtype: str
        """
        return self._reasonForIncompletion

    @reasonForIncompletion.setter
    def reasonForIncompletion(self, reasonForIncompletion):
        """Sets the reasonForIncompletion of this Task.


        :param reasonForIncompletion: The reasonForIncompletion of this Task.  # noqa: E501
        :type: str
        """

        self._reasonForIncompletion = reasonForIncompletion

    @property
    def callbackAfterSeconds(self):
        """Gets the callbackAfterSeconds of this Task.  # noqa: E501


        :return: The callbackAfterSeconds of this Task.  # noqa: E501
        :rtype: int
        """
        return self._callbackAfterSeconds

    @callbackAfterSeconds.setter
    def callbackAfterSeconds(self, callbackAfterSeconds):
        """Sets the callbackAfterSeconds of this Task.


        :param callbackAfterSeconds: The callbackAfterSeconds of this Task.  # noqa: E501
        :type: int
        """

        self._callbackAfterSeconds = callbackAfterSeconds

    @property
    def workerId(self):
        """Gets the workerId of this Task.  # noqa: E501


        :return: The workerId of this Task.  # noqa: E501
        :rtype: str
        """
        return self._workerId

    @workerId.setter
    def workerId(self, workerId):
        """Sets the workerId of this Task.


        :param workerId: The workerId of this Task.  # noqa: E501
        :type: str
        """

        self._workerId = workerId

    @property
    def outputData(self):
        """Gets the outputData of this Task.  # noqa: E501


        :return: The outputData of this Task.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._outputData

    @outputData.setter
    def outputData(self, outputData):
        """Sets the outputData of this Task.


        :param outputData: The outputData of this Task.  # noqa: E501
        :type: dict(str, object)
        """

        self._outputData = outputData

    @property
    def workflowTask(self):
        """Gets the workflowTask of this Task.  # noqa: E501


        :return: The workflowTask of this Task.  # noqa: E501
        :rtype: WorkflowTask
        """
        return self._workflowTask

    @workflowTask.setter
    def workflowTask(self, workflowTask):
        """Sets the workflowTask of this Task.


        :param workflowTask: The workflowTask of this Task.  # noqa: E501
        :type: WorkflowTask
        """

        self._workflowTask = workflowTask

    @property
    def domain(self):
        """Gets the domain of this Task.  # noqa: E501


        :return: The domain of this Task.  # noqa: E501
        :rtype: str
        """
        return self._domain

    @domain.setter
    def domain(self, domain):
        """Sets the domain of this Task.


        :param domain: The domain of this Task.  # noqa: E501
        :type: str
        """

        self._domain = domain

    @property
    def rateLimitPerFrequency(self):
        """Gets the rateLimitPerFrequency of this Task.  # noqa: E501


        :return: The rateLimitPerFrequency of this Task.  # noqa: E501
        :rtype: int
        """
        return self._rateLimitPerFrequency

    @rateLimitPerFrequency.setter
    def rateLimitPerFrequency(self, rateLimitPerFrequency):
        """Sets the rateLimitPerFrequency of this Task.


        :param rateLimitPerFrequency: The rateLimitPerFrequency of this Task.  # noqa: E501
        :type: int
        """

        self._rateLimitPerFrequency = rateLimitPerFrequency

    @property
    def rateLimitFrequencyInSeconds(self):
        """Gets the rateLimitFrequencyInSeconds of this Task.  # noqa: E501


        :return: The rateLimitFrequencyInSeconds of this Task.  # noqa: E501
        :rtype: int
        """
        return self._rateLimitFrequencyInSeconds

    @rateLimitFrequencyInSeconds.setter
    def rateLimitFrequencyInSeconds(self, rateLimitFrequencyInSeconds):
        """Sets the rateLimitFrequencyInSeconds of this Task.


        :param rateLimitFrequencyInSeconds: The rateLimitFrequencyInSeconds of this Task.  # noqa: E501
        :type: int
        """

        self._rateLimitFrequencyInSeconds = rateLimitFrequencyInSeconds

    @property
    def externalInputPayloadStoragePath(self):
        """Gets the externalInputPayloadStoragePath of this Task.  # noqa: E501


        :return: The externalInputPayloadStoragePath of this Task.  # noqa: E501
        :rtype: str
        """
        return self._externalInputPayloadStoragePath

    @externalInputPayloadStoragePath.setter
    def externalInputPayloadStoragePath(self, externalInputPayloadStoragePath):
        """Sets the externalInputPayloadStoragePath of this Task.


        :param externalInputPayloadStoragePath: The externalInputPayloadStoragePath of this Task.  # noqa: E501
        :type: str
        """

        self._externalInputPayloadStoragePath = externalInputPayloadStoragePath

    @property
    def externalOutputPayloadStoragePath(self):
        """Gets the externalOutputPayloadStoragePath of this Task.  # noqa: E501


        :return: The externalOutputPayloadStoragePath of this Task.  # noqa: E501
        :rtype: str
        """
        return self._externalOutputPayloadStoragePath

    @externalOutputPayloadStoragePath.setter
    def externalOutputPayloadStoragePath(self, externalOutputPayloadStoragePath):
        """Sets the externalOutputPayloadStoragePath of this Task.


        :param externalOutputPayloadStoragePath: The externalOutputPayloadStoragePath of this Task.  # noqa: E501
        :type: str
        """

        self._externalOutputPayloadStoragePath = externalOutputPayloadStoragePath

    @property
    def workflowPriority(self):
        """Gets the workflowPriority of this Task.  # noqa: E501


        :return: The workflowPriority of this Task.  # noqa: E501
        :rtype: int
        """
        return self._workflowPriority

    @workflowPriority.setter
    def workflowPriority(self, workflowPriority):
        """Sets the workflowPriority of this Task.


        :param workflowPriority: The workflowPriority of this Task.  # noqa: E501
        :type: int
        """

        self._workflowPriority = workflowPriority

    @property
    def executionNameSpace(self):
        """Gets the executionNameSpace of this Task.  # noqa: E501


        :return: The executionNameSpace of this Task.  # noqa: E501
        :rtype: str
        """
        return self._executionNameSpace

    @executionNameSpace.setter
    def executionNameSpace(self, executionNameSpace):
        """Sets the executionNameSpace of this Task.


        :param executionNameSpace: The executionNameSpace of this Task.  # noqa: E501
        :type: str
        """

        self._executionNameSpace = executionNameSpace

    @property
    def isolationGroupId(self):
        """Gets the isolationGroupId of this Task.  # noqa: E501


        :return: The isolationGroupId of this Task.  # noqa: E501
        :rtype: str
        """
        return self._isolationGroupId

    @isolationGroupId.setter
    def isolationGroupId(self, isolationGroupId):
        """Sets the isolationGroupId of this Task.


        :param isolationGroupId: The isolationGroupId of this Task.  # noqa: E501
        :type: str
        """

        self._isolationGroupId = isolationGroupId

    @property
    def iteration(self):
        """Gets the iteration of this Task.  # noqa: E501


        :return: The iteration of this Task.  # noqa: E501
        :rtype: int
        """
        return self._iteration

    @iteration.setter
    def iteration(self, iteration):
        """Sets the iteration of this Task.


        :param iteration: The iteration of this Task.  # noqa: E501
        :type: int
        """

        self._iteration = iteration

    @property
    def subWorkflowId(self):
        """Gets the subWorkflowId of this Task.  # noqa: E501


        :return: The subWorkflowId of this Task.  # noqa: E501
        :rtype: str
        """
        return self._subWorkflowId

    @subWorkflowId.setter
    def subWorkflowId(self, subWorkflowId):
        """Sets the subWorkflowId of this Task.


        :param subWorkflowId: The subWorkflowId of this Task.  # noqa: E501
        :type: str
        """

        self._subWorkflowId = subWorkflowId

    @property
    def subworkflowChanged(self):
        """Gets the subworkflowChanged of this Task.  # noqa: E501


        :return: The subworkflowChanged of this Task.  # noqa: E501
        :rtype: bool
        """
        return self._subworkflowChanged

    @subworkflowChanged.setter
    def subworkflowChanged(self, subworkflowChanged):
        """Sets the subworkflowChanged of this Task.


        :param subworkflowChanged: The subworkflowChanged of this Task.  # noqa: E501
        :type: bool
        """

        self._subworkflowChanged = subworkflowChanged

    @property
    def loopOverTask(self):
        """Gets the loopOverTask of this Task.  # noqa: E501


        :return: The loopOverTask of this Task.  # noqa: E501
        :rtype: bool
        """
        return self._loopOverTask

    @loopOverTask.setter
    def loopOverTask(self, loopOverTask):
        """Sets the loopOverTask of this Task.


        :param loopOverTask: The loopOverTask of this Task.  # noqa: E501
        :type: bool
        """

        self._loopOverTask = loopOverTask

    @property
    def taskDefinition(self):
        """Gets the taskDefinition of this Task.  # noqa: E501


        :return: The taskDefinition of this Task.  # noqa: E501
        :rtype: TaskDef
        """
        return self._taskDefinition

    @taskDefinition.setter
    def taskDefinition(self, taskDefinition):
        """Sets the taskDefinition of this Task.


        :param taskDefinition: The taskDefinition of this Task.  # noqa: E501
        :type: TaskDef
        """

        self._taskDefinition = taskDefinition

    @property
    def queueWaitTime(self):
        """Gets the queueWaitTime of this Task.  # noqa: E501


        :return: The queueWaitTime of this Task.  # noqa: E501
        :rtype: int
        """
        return self._queueWaitTime

    @queueWaitTime.setter
    def queueWaitTime(self, queueWaitTime):
        """Sets the queueWaitTime of this Task.


        :param queueWaitTime: The queueWaitTime of this Task.  # noqa: E501
        :type: int
        """

        self._queueWaitTime = queueWaitTime

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value)
                )
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict")
                        else item,
                        value.items(),
                    )
                )
            else:
                result[attr] = value
        if issubclass(Task, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Task):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
