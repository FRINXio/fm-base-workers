import pprint
import re  # noqa: F401
from typing import Any

import six


class TaskDef(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        "ownerApp": "str",
        "createTime": "int",
        "updateTime": "int",
        "createdBy": "str",
        "updatedBy": "str",
        "name": "str",
        "description": "str",
        "retryCount": "int",
        "timeoutSeconds": "int",
        "inputKeys": "list[str]",
        "outputKeys": "list[str]",
        "timeoutPolicy": "str",
        "retryLogic": "str",
        "retryDelaySeconds": "int",
        "responseTimeoutSeconds": "int",
        "concurrentExecLimit": "int",
        "inputTemplate": "dict(str, object)",
        "rateLimitPerFrequency": "int",
        "rateLimitFrequencyInSeconds": "int",
        "isolationGroupId": "str",
        "executionNameSpace": "str",
        "ownerEmail": "str",
        "pollTimeoutSeconds": "int",
        "backoffScaleFactor": "int",
    }

    attribute_map = {
        "ownerApp": "ownerApp",
        "createTime": "createTime",
        "updateTime": "updateTime",
        "createdBy": "createdBy",
        "updatedBy": "updatedBy",
        "name": "name",
        "description": "description",
        "retryCount": "retryCount",
        "timeoutSeconds": "timeoutSeconds",
        "inputKeys": "inputKeys",
        "outputKeys": "outputKeys",
        "timeoutPolicy": "timeoutPolicy",
        "retryLogic": "retryLogic",
        "retryDelaySeconds": "retryDelaySeconds",
        "responseTimeoutSeconds": "responseTimeoutSeconds",
        "concurrentExecLimit": "concurrentExecLimit",
        "inputTemplate": "inputTemplate",
        "rateLimitPerFrequency": "rateLimitPerFrequency",
        "rateLimitFrequencyInSeconds": "rateLimitFrequencyInSeconds",
        "isolationGroupId": "isolationGroupId",
        "executionNameSpace": "executionNameSpace",
        "ownerEmail": "ownerEmail",
        "pollTimeoutSeconds": "pollTimeoutSeconds",
        "backoffScaleFactor": "backoffScaleFactor",
    }

    def __init__(
        self,
        ownerApp=None,
        createTime=None,
        updateTime=None,
        createdBy=None,
        updatedBy=None,
        name=None,
        description=None,
        retryCount=None,
        timeoutSeconds=None,
        inputKeys=None,
        outputKeys=None,
        timeoutPolicy=None,
        retryLogic=None,
        retryDelaySeconds=None,
        responseTimeoutSeconds=None,
        concurrentExecLimit=None,
        inputTemplate=None,
        rateLimitPerFrequency=None,
        rateLimitFrequencyInSeconds=None,
        isolationGroupId=None,
        executionNameSpace=None,
        ownerEmail=None,
        pollTimeoutSeconds=None,
        backoffScaleFactor=None,
    ):  # noqa: E501
        """TaskDef - a model defined in Swagger"""  # noqa: E501
        self._ownerApp = None
        self._createTime = None
        self._updateTime = None
        self._createdBy = None
        self._updatedBy = None
        self._name = None
        self._description = None
        self._retryCount = None
        self._timeoutSeconds = None
        self._inputKeys = None
        self._outputKeys = None
        self._timeoutPolicy = None
        self._retryLogic = None
        self._retryDelaySeconds = None
        self._responseTimeoutSeconds = None
        self._concurrentExecLimit = None
        self._inputTemplate = None
        self._rateLimitPerFrequency = None
        self._rateLimitFrequencyInSeconds = None
        self._isolationGroupId = None
        self._executionNameSpace = None
        self._ownerEmail = None
        self._pollTimeoutSeconds = None
        self._backoffScaleFactor = None
        self.discriminator = None
        if ownerApp is not None:
            self.ownerApp = ownerApp
        if createTime is not None:
            self.createTime = createTime
        if updateTime is not None:
            self.update_time = updateTime
        if createdBy is not None:
            self.createdBy = createdBy
        if updatedBy is not None:
            self.updatedBy = updatedBy
        self.name = name
        if description is not None:
            self.description = description
        if retryCount is not None:
            self.retryCount = retryCount
        self.timeoutSeconds = timeoutSeconds
        if inputKeys is not None:
            self.inputKeys = inputKeys
        if outputKeys is not None:
            self.outputKeys = outputKeys
        if timeoutPolicy is not None:
            self.timeoutPolicy = timeoutPolicy
        if retryLogic is not None:
            self.retryLogic = retryLogic
        if retryDelaySeconds is not None:
            self.retryDelaySeconds = retryDelaySeconds
        if responseTimeoutSeconds is not None:
            self.responseTimeoutSeconds = responseTimeoutSeconds
        if concurrentExecLimit is not None:
            self.concurrentExecLimit = concurrentExecLimit
        if inputTemplate is not None:
            self.inputTemplate = inputTemplate
        if rateLimitPerFrequency is not None:
            self.rateLimitPerFrequency = rateLimitPerFrequency
        if rateLimitFrequencyInSeconds is not None:
            self.rateLimitFrequencyInSeconds = rateLimitFrequencyInSeconds
        if isolationGroupId is not None:
            self.isolationGroupId = isolationGroupId
        if executionNameSpace is not None:
            self.executionNameSpace = executionNameSpace
        if ownerEmail is not None:
            self.ownerEmail = ownerEmail
        if pollTimeoutSeconds is not None:
            self.pollTimeoutSeconds = pollTimeoutSeconds
        if backoffScaleFactor is not None:
            self.backoffScaleFactor = backoffScaleFactor

    @property
    def ownerApp(self) -> str:
        """Gets the ownerApp of this TaskDef.  # noqa: E501


        :return: The ownerApp of this TaskDef.  # noqa: E501
        :rtype: str
        """
        return self._ownerApp

    @ownerApp.setter
    def ownerApp(self, owner_app: str):
        """Sets the ownerApp of this TaskDef.


        :param owner_app: The ownerApp of this TaskDef.  # noqa: E501
        :type: str
        """

        self._ownerApp = owner_app

    @property
    def createTime(self) -> int:
        """Gets the create_time of this TaskDef.  # noqa: E501


        :return: The create_time of this TaskDef.  # noqa: E501
        :rtype: int
        """
        return self._createTime

    @createTime.setter
    def createTime(self, create_time) -> None:
        """Sets the create_time of this TaskDef.


        :param create_time: The create_time of this TaskDef.  # noqa: E501
        :type: int
        """

        self._createTime = create_time

    @property
    def updateTime(self) -> int:
        """Gets the update_time of this TaskDef.  # noqa: E501


        :return: The update_time of this TaskDef.  # noqa: E501
        :rtype: int
        """
        return self._updateTime

    @updateTime.setter
    def updateTime(self, update_time) -> None:
        """Sets the update_time of this TaskDef.


        :param update_time: The update_time of this TaskDef.  # noqa: E501
        :type: int
        """

        self._updateTime = update_time

    @property
    def createdBy(self) -> str:
        """Gets the created_by of this TaskDef.  # noqa: E501


        :return: The created_by of this TaskDef.  # noqa: E501
        :rtype: str
        """
        return self._createdBy

    @createdBy.setter
    def createdBy(self, created_by: str) -> None:
        """Sets the created_by of this TaskDef.


        :param created_by: The created_by of this TaskDef.  # noqa: E501
        :type: str
        """

        self._createdBy = created_by

    @property
    def updatedBy(self) -> str:
        """Gets the updated_by of this TaskDef.  # noqa: E501


        :return: The updated_by of this TaskDef.  # noqa: E501
        :rtype: str
        """
        return self._updatedBy

    @updatedBy.setter
    def updatedBy(self, updated_by: str) -> None:
        """Sets the updated_by of this TaskDef.


        :param updated_by: The updated_by of this TaskDef.  # noqa: E501
        :type: str
        """

        self._updatedBy = updated_by

    @property
    def name(self) -> str:
        """Gets the name of this TaskDef.  # noqa: E501


        :return: The name of this TaskDef.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str) -> None:
        """Sets the name of this TaskDef.


        :param name: The name of this TaskDef.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def description(self) -> str:
        """Gets the description of this TaskDef.  # noqa: E501


        :return: The description of this TaskDef.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description: str) -> None:
        """Sets the description of this TaskDef.


        :param description: The description of this TaskDef.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def retryCount(self) -> int:
        """Gets the retry_count of this TaskDef.  # noqa: E501


        :return: The retry_count of this TaskDef.  # noqa: E501
        :rtype: int
        """
        return self._retryCount

    @retryCount.setter
    def retryCount(self, retry_count: int) -> None:
        """Sets the retry_count of this TaskDef.


        :param retry_count: The retry_count of this TaskDef.  # noqa: E501
        :type: int
        """

        self._retryCount = retry_count

    @property
    def timeoutSeconds(self) -> int:
        """Gets the timeout_seconds of this TaskDef.  # noqa: E501


        :return: The timeout_seconds of this TaskDef.  # noqa: E501
        :rtype: int
        """
        return self._timeoutSeconds

    @timeoutSeconds.setter
    def timeoutSeconds(self, timeout_seconds: int) -> None:
        """Sets the timeout_seconds of this TaskDef.


        :param timeout_seconds: The timeout_seconds of this TaskDef.  # noqa: E501
        :type: int
        """
        # if timeout_seconds is None:
        #     raise ValueError("Invalid value for `timeout_seconds`, must not be `None`")  # noqa: E501

        self._timeoutSeconds = timeout_seconds

    @property
    def inputKeys(self) -> list[str]:
        """Gets the input_keys of this TaskDef.  # noqa: E501


        :return: The input_keys of this TaskDef.  # noqa: E501
        :rtype: list[str]
        """
        return self._inputKeys

    @inputKeys.setter
    def inputKeys(self, input_keys: list[str]) -> None:
        """Sets the input_keys of this TaskDef.


        :param input_keys: The input_keys of this TaskDef.  # noqa: E501
        :type: list[str]
        """

        self._inputKeys = input_keys

    @property
    def outputKeys(self) -> list[str]:
        """Gets the output_keys of this TaskDef.  # noqa: E501


        :return: The output_keys of this TaskDef.  # noqa: E501
        :rtype: list[str]
        """
        return self._outputKeys

    @outputKeys.setter
    def outputKeys(self, output_keys: list[str]) -> None:
        """Sets the output_keys of this TaskDef.


        :param output_keys: The output_keys of this TaskDef.  # noqa: E501
        :type: list[str]
        """

        self._outputKeys = output_keys

    @property
    def timeoutPolicy(self) -> str:
        """Gets the timeout_policy of this TaskDef.  # noqa: E501


        :return: The timeout_policy of this TaskDef.  # noqa: E501
        :rtype: str
        """
        return self._timeoutPolicy

    @timeoutPolicy.setter
    def timeoutPolicy(self, timeout_policy: str) -> None:
        """Sets the timeout_policy of this TaskDef.


        :param timeout_policy: The timeout_policy of this TaskDef.  # noqa: E501
        :type: str
        """
        allowed_values = ["RETRY", "TIME_OUT_WF", "ALERT_ONLY"]  # noqa: E501
        if timeout_policy not in allowed_values:
            raise ValueError(
                "Invalid value for `timeout_policy` ({0}), must be one of {1}".format(  # noqa: E501
                    timeout_policy, allowed_values
                )
            )

        self._timeoutPolicy = timeout_policy

    @property
    def retryLogic(self) -> str:
        """Gets the retry_logic of this TaskDef.  # noqa: E501


        :return: The retry_logic of this TaskDef.  # noqa: E501
        :rtype: str
        """
        return self._retryLogic

    @retryLogic.setter
    def retryLogic(self, retry_logic: str) -> None:
        """Sets the retry_logic of this TaskDef.


        :param retry_logic: The retry_logic of this TaskDef.  # noqa: E501
        :type: str
        """
        allowed_values = ["FIXED", "EXPONENTIAL_BACKOFF", "LINEAR_BACKOFF"]  # noqa: E501
        if retry_logic not in allowed_values:
            raise ValueError(
                "Invalid value for `retry_logic` ({0}), must be one of {1}".format(  # noqa: E501
                    retry_logic, allowed_values
                )
            )

        self._retryLogic = retry_logic

    @property
    def retryDelaySeconds(self) -> int:
        """Gets the retry_delay_seconds of this TaskDef.  # noqa: E501


        :return: The retry_delay_seconds of this TaskDef.  # noqa: E501
        :rtype: int
        """
        return self._retryDelaySeconds

    @retryDelaySeconds.setter
    def retryDelaySeconds(self, retry_delay_seconds: int) -> None:
        """Sets the retry_delay_seconds of this TaskDef.


        :param retry_delay_seconds: The retry_delay_seconds of this TaskDef.  # noqa: E501
        :type: int
        """

        self._retryDelaySeconds = retry_delay_seconds

    @property
    def responseTimeoutSeconds(self) -> int:
        """Gets the response_timeout_seconds of this TaskDef.  # noqa: E501


        :return: The response_timeout_seconds of this TaskDef.  # noqa: E501
        :rtype: int
        """
        return self._responseTimeoutSeconds

    @responseTimeoutSeconds.setter
    def responseTimeoutSeconds(self, response_timeout_seconds: int) -> None:
        """Sets the response_timeout_seconds of this TaskDef.


        :param response_timeout_seconds: The response_timeout_seconds of this TaskDef.  # noqa: E501
        :type: int
        """

        self._responseTimeoutSeconds = response_timeout_seconds

    @property
    def concurrentExecLimit(self) -> int:
        """Gets the concurrent_exec_limit of this TaskDef.  # noqa: E501


        :return: The concurrent_exec_limit of this TaskDef.  # noqa: E501
        :rtype: int
        """
        return self._concurrentExecLimit

    @concurrentExecLimit.setter
    def concurrentExecLimit(self, concurrent_exec_limit: int) -> None:
        """Sets the concurrent_exec_limit of this TaskDef.


        :param concurrent_exec_limit: The concurrent_exec_limit of this TaskDef.  # noqa: E501
        :type: int
        """

        self._concurrentExecLimit = concurrent_exec_limit

    @property
    def inputTemplate(self) -> dict[str, Any]:
        """Gets the input_template of this TaskDef.  # noqa: E501


        :return: The input_template of this TaskDef.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._inputTemplate

    @inputTemplate.setter
    def inputTemplate(self, input_template) -> None:
        """Sets the input_template of this TaskDef.


        :param input_template: The input_template of this TaskDef.  # noqa: E501
        :type: dict(str, object)
        """

        self._inputTemplate = input_template

    @property
    def rateLimitPerFrequency(self) -> int:
        """Gets the rate_limit_per_frequency of this TaskDef.  # noqa: E501


        :return: The rate_limit_per_frequency of this TaskDef.  # noqa: E501
        :rtype: int
        """
        return self._rateLimitPerFrequency

    @rateLimitPerFrequency.setter
    def rateLimitPerFrequency(self, rate_limit_per_frequency: int) -> None:
        """Sets the rate_limit_per_frequency of this TaskDef.


        :param rate_limit_per_frequency: The rate_limit_per_frequency of this TaskDef.  # noqa: E501
        :type: int
        """

        self._rateLimitPerFrequency = rate_limit_per_frequency

    @property
    def rateLimitFrequencyInSeconds(self) -> int:
        """Gets the rate_limit_frequency_in_seconds of this TaskDef.  # noqa: E501


        :return: The rate_limit_frequency_in_seconds of this TaskDef.  # noqa: E501
        :rtype: int
        """
        return self._rateLimitFrequencyInSeconds

    @rateLimitFrequencyInSeconds.setter
    def rateLimitFrequencyInSeconds(self, rate_limit_frequency_in_seconds: int) -> None:
        """Sets the rate_limit_frequency_in_seconds of this TaskDef.


        :param rate_limit_frequency_in_seconds: The rate_limit_frequency_in_seconds of this TaskDef.  # noqa: E501
        :type: int
        """

        self._rateLimitFrequencyInSeconds = rate_limit_frequency_in_seconds

    @property
    def isolationGroupId(self) -> str:
        """Gets the isolation_group_id of this TaskDef.  # noqa: E501


        :return: The isolation_group_id of this TaskDef.  # noqa: E501
        :rtype: str
        """
        return self._isolationGroupId

    @isolationGroupId.setter
    def isolationGroupId(self, isolation_group_id: str) -> None:
        """Sets the isolation_group_id of this TaskDef.


        :param isolation_group_id: The isolation_group_id of this TaskDef.  # noqa: E501
        :type: str
        """

        self._isolationGroupId = isolation_group_id

    @property
    def executionNameSpace(self) -> str:
        """Gets the execution_name_space of this TaskDef.  # noqa: E501


        :return: The execution_name_space of this TaskDef.  # noqa: E501
        :rtype: str
        """
        return self._executionNameSpace

    @executionNameSpace.setter
    def executionNameSpace(self, execution_name_space: str) -> None:
        """Sets the execution_name_space of this TaskDef.


        :param execution_name_space: The execution_name_space of this TaskDef.  # noqa: E501
        :type: str
        """

        self._executionNameSpace = execution_name_space

    @property
    def ownerEmail(self) -> str:
        """Gets the owner_email of this TaskDef.  # noqa: E501


        :return: The owner_email of this TaskDef.  # noqa: E501
        :rtype: str
        """
        return self._ownerEmail

    @ownerEmail.setter
    def ownerEmail(self, owner_email: str) -> None:
        """Sets the owner_email of this TaskDef.


        :param owner_email: The owner_email of this TaskDef.  # noqa: E501
        :type: str
        """

        self._ownerEmail = owner_email

    @property
    def pollTimeoutSeconds(self) -> int:
        """Gets the poll_timeout_seconds of this TaskDef.  # noqa: E501


        :return: The poll_timeout_seconds of this TaskDef.  # noqa: E501
        :rtype: int
        """
        return self._pollTimeoutSeconds

    @pollTimeoutSeconds.setter
    def pollTimeoutSeconds(self, poll_timeout_seconds: int) -> None:
        """Sets the poll_timeout_seconds of this TaskDef.


        :param poll_timeout_seconds: The poll_timeout_seconds of this TaskDef.  # noqa: E501
        :type: int
        """

        self._pollTimeoutSeconds = poll_timeout_seconds

    @property
    def backoffScaleFactor(self) -> int:
        """Gets the backoff_scale_factor of this TaskDef.  # noqa: E501


        :return: The backoff_scale_factor of this TaskDef.  # noqa: E501
        :rtype: int
        """
        return self._backoffScaleFactor

    @backoffScaleFactor.setter
    def backoffScaleFactor(self, backoff_scale_factor: int) -> None:
        """Sets the backoff_scale_factor of this TaskDef.


        :param backoff_scale_factor: The backoff_scale_factor of this TaskDef.  # noqa: E501
        :type: int
        """

        self._backoffScaleFactor = backoff_scale_factor

    def to_dict(self) -> dict[str, str]:
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value)
                )
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict")
                        else item,
                        value.items(),
                    )
                )
            else:
                result[attr] = value
        if issubclass(TaskDef, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TaskDef):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
